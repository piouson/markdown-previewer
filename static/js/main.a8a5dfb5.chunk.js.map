{"version":3,"sources":["useMarked.js","useLocalStorage.js","App.js","text.js","serviceWorker.js","index.js"],"names":["OPTIONS","breaks","headerIds","smartLists","useMarked","text","options","useState","parsedHtml","setParsedHtml","useEffect","marked","setOptions","console","log","html","DOMPurify","sanitize","__html","useLocalStorage","key","initialState","JSON","parse","localStorage","getItem","value","setValue","setItem","stringify","App","data","setData","previewer","str","className","id","href","onChange","event","target","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kRAIMA,EAAU,CACdC,QAAQ,EACRC,WAAW,EACXC,YAAY,GAyBCC,EAtBG,SAACC,GAA0B,IAApBC,EAAmB,uDAAT,KAAS,EACNC,mBAAS,MADH,mBACnCC,EADmC,KACvBC,EADuB,KAmB1C,OAhBAC,qBAAU,WACJJ,EACFK,IAAOC,WAAP,2BAAsBZ,GAAtB,IAA+BM,aAG/BK,IAAOC,WAAP,eAAsBZ,IAExBa,QAAQC,IAAI,oBAEZ,IAAMC,EAAOC,IAAUC,SACrBN,IAAON,IAGTI,EAAc,CAACS,OAAQH,MACtB,CAACV,EAAMC,IAEHE,GCfMW,EAZS,SAACC,EAAKC,GAAkB,IAAD,EACnBd,mBACxBe,KAAKC,MAAMC,aAAaC,QAAQL,KAASC,GAFE,mBACtCK,EADsC,KAC/BC,EAD+B,KAS7C,OAJAjB,qBAAU,WACRc,aAAaI,QAAQR,EAAKE,KAAKO,UAAUH,MACxC,CAACN,EAAKM,IAEF,CAACA,EAAOC,ICqBFG,MA1Bf,WAAgB,IAAD,EACWX,EAAgB,QAAS,IADpC,mBACNY,EADM,KACAC,EADA,KAEPC,EAAY7B,EAAU2B,GAU5B,OARArB,qBAAU,WACRsB,GAAQ,SAAAE,GAAG,OAAIA,GCXT,gvCDYNrB,QAAQC,IAAI,mBACX,CAACkB,IAMF,yBAAKG,UAAU,OACb,yBAAKC,GAAG,OACN,uBAAGC,KAAK,WAAR,UACA,uBAAGA,KAAK,YAAR,YAEF,yBAAKD,GAAG,MACN,8BAAUA,GAAG,SAASV,MAAOK,EAAMO,SAVpB,SAAAC,GAAK,OACxBP,EAAQO,EAAMC,OAAOd,WAWnB,yBAAKU,GAAG,UAAUK,wBAAyBR,MEf7BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.a8a5dfb5.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport marked from 'marked';\r\nimport DOMPurify from 'dompurify';\r\n\r\nconst OPTIONS = {\r\n  breaks: true,\r\n  headerIds: false,\r\n  smartLists: true\r\n};\r\n\r\nconst useMarked = (text, options = null) => {\r\n  const [parsedHtml, setParsedHtml] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (options) {\r\n      marked.setOptions({...OPTIONS, options});\r\n    }\r\n    else {\r\n      marked.setOptions({...OPTIONS})\r\n    }\r\n    console.log('Marked useEffect');\r\n\r\n    const html = DOMPurify.sanitize(\r\n      marked(text)\r\n    );\r\n\r\n    setParsedHtml({__html: html});\r\n  }, [text, options]);\r\n\r\n  return parsedHtml;\r\n}\r\n\r\nexport default useMarked;","import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialState) => {\r\n  const [value, setValue] = useState(\r\n    JSON.parse(localStorage.getItem(key)) || initialState\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n\r\nexport default useLocalStorage;","import React, { useEffect } from 'react';\nimport './App.css';\nimport useMarked from './useMarked';\nimport useLocalStorage from './useLocalStorage';\nimport text from './text';\n\nfunction App() {\n  const [data, setData] = useLocalStorage('markd', '');\n  const previewer = useMarked(data);\n\n  useEffect(() => {\n    setData(str => str ? str : text);\n    console.log('App useEffect');\n  }, [setData]);\n\n  const handleChange = event =>\n    setData(event.target.value);\n\n  return (\n    <div className=\"App\">\n      <div id=\"nav\">\n        <a href=\"#editor\">Editor</a>\n        <a href=\"#preview\">Preview</a>\n      </div>\n      <div id=\"md\">\n        <textarea id=\"editor\" value={data} onChange={handleChange} />\n      </div>\n      <div id=\"preview\" dangerouslySetInnerHTML={previewer} />\n    </div>\n  );\n}\n\nexport default App;\n","const text = `# Markdown Previewer\r\n\r\nThis is the second [**freeCodeCamp**](https://www.freecodecamp.org/) frontend libraries project.\r\n\r\n> ![dompurify](https://img.shields.io/github/package-json/dependency-version/piouson/markdown-previewer/dompurify) ![gh-pages](https://img.shields.io/github/package-json/dependency-version/piouson/markdown-previewer/gh-pages) ![marked](https://img.shields.io/github/package-json/dependency-version/piouson/markdown-previewer/marked) ![react](https://img.shields.io/github/package-json/dependency-version/piouson/markdown-previewer/react) ![react-dom](https://img.shields.io/github/package-json/dependency-version/piouson/markdown-previewer/react-dom) ![react-scripts](https://img.shields.io/github/package-json/dependency-version/piouson/markdown-previewer/react-scripts)\r\n\r\n## Dependencies\r\n\r\n- [DOM Purify](https://github.com/cure53/DOMPurify)\r\n- [Github gh-pages](https://github.com/tschaub/gh-pages)\r\n- [Marked](https://github.com/markedjs/marked)\r\n\r\n## Run Locally\r\n\r\n\\`\\`\\`bash\r\ngit clone git@github.com:piouson/markdown-previewer.git\r\ncd markdown-previewer\r\nnpm install\r\nnpm start\r\n\\`\\`\\`\r\n\r\nRemember you can review project history with \\`git status --oneline --graph\\`.\r\n\r\n## Author\r\n\r\n[piouson.github.io](http://piouson.github.io/)\r\n`\r\n\r\nexport default text;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}